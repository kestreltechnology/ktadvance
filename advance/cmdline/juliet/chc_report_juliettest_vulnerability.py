# ------------------------------------------------------------------------------
# Access to the C Analyzer Analysis Results
# Author: Henny Sipma
# ------------------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2017-2018 Kestrel Technology LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ------------------------------------------------------------------------------

import argparse
import os

import advance.util.printutil as UP
import advance.util.fileutil as UF
import advance.reporting.ProofObligations as RP
import advance.cmdline.juliet.JulietTestScoring as JTS

from advance.util.Config import Config
from advance.app.CApplication import CApplication

from advance.cmdline.juliet.JulietTestSetRef import JulietTestSetRef

def parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('path',
                            help='path to the juliet test case (relative to juliet_v1.3)' +
                            ' (e.g., CWE121/s01/CWE129_large)')
    parser.add_argument('test',help='seqence number of the test, e.g., 05')
    args = parser.parse_args()
    return args

if __name__ == '__main__':

    args = parse()
    cpath = UF.get_juliet_testpath(args.path)

    if not os.path.isdir(cpath):
        print(UP.cpath_not_found_err_msg(cpath))
        exit(1)

    d = UF.get_juliet_reference(args.path)

    if d is None:
        print(UP.err_msg(['No score key found for juliet test ', '  ' + cpath,
                              '  Please create a score key first']))
        exit(1)

    sempath = os.path.join(cpath,'semantics')
    if not os.path.isdir(sempath):
        print(UP.semantics_not_found_err_msg(cpath))
        exit(1)

    capp = CApplication(sempath)

    testset = JulietTestSetRef(d)

    if not args.test in testset.tests:
        print('*' * 80)
        print('Test ' + args.path + ' does not include test ' + args.test)
        print('\nTests included:')
        print('  ' + ','.join(sorted(testset.tests)))
        print('*' * 80)
        exit(1)
        
    test = testset.tests[args.test]
    cfiles = [ x[0] for x in test.get_cfiles() ]
    julietppos = JTS.get_julietppos(testset)
    julietppos = { x:julietppos[x] for x in julietppos if x in cfiles }

    pairs = JTS.get_ppo_pairs(julietppos,capp)
    
    pos = {}
    for filename in cfiles: pos[filename] = {}

    lines = []
    for filename in pairs:
        for fn in sorted(pairs[filename]):
            fnlen = len(fn)
            lines.append('\n\n' + ('*' * 10) + ' Function: ' + fn + ' ' + ('*' * (70-fnlen)))
            cfile = capp.get_file(filename)
            cfun = cfile.get_function_by_name(fn)
            ppos = [ x[1] for x in pairs[filename][fn] ]
            ppoids = [ x.id for x in ppos ]
            ppofilter = lambda ppo:(ppo.id in ppoids) and ppo.is_ppo()
            lines.append(RP.function_code_tostring(cfun,pofilter=ppofilter,showpreamble=False))
            spos = sum((JTS.get_associated_spos(x,capp) for x in ppos),[])
            callers = {}
            for spo in spos:
                cfun = spo.cfun
                if not cfun.name in callers:
                    callers[cfun.name] = {}
                    callers[cfun.name]['cfun'] = cfun
                    callers[cfun.name]['spos'] = []
                callers[cfun.name]['spos'].append(spo.id)
            if len(callers) > 0:
                lines.append('-' * 80)
                lines.append('Callers')
                lines.append('-' * 80)
                for fn in callers:
                    spofilter = lambda spo:(spo.id in callers[fn]['spos']) and not spo.is_ppo()
                    lines.append(RP.function_code_tostring(
                        callers[fn]['cfun'],
                        pofilter=spofilter,
                        showpreamble=False))
            
    
    print('\n'.join(lines))
